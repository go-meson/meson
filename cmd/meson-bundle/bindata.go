// Code generated by go-bindata.
// sources:
// info.plist.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infoPlistTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\xdb\x6f\xdb\x20\x14\xc6\x9f\xe3\xbf\x82\x59\x7d\x5c\xc0\xee\x5a\x75\xab\x88\xab\xc6\x4e\xaa\x68\xb9\x49\x76\xa7\xee\x69\x42\x40\x13\x54\x0c\x16\x90\x9b\x2c\xff\xef\x13\x49\x9a\xb5\xb9\x3c\xec\x0d\xc4\xf7\xfb\x74\x38\xe7\x3b\xf8\x61\x5d\x4a\xb0\xe4\xc6\x0a\xad\x3a\x61\x0c\xa3\x10\x70\x45\x35\x13\x6a\xd6\x09\x9f\x8b\x7e\xfb\x7b\xf8\x90\x04\xf8\x4b\x36\x49\x8b\xdf\xd3\x1e\xa8\xa4\xb0\x0e\x4c\x9f\xbb\xc3\x41\x0a\xc2\x36\x42\x8f\x55\x25\x39\x42\x59\x91\x81\xe9\x70\x90\x17\x20\x86\x11\x42\xbd\x71\x08\xc2\xb9\x73\xd5\x3d\x42\xab\xd5\x0a\x12\xaf\x82\x54\x97\x5e\x68\xd1\xd4\xe8\x8a\x1b\xb7\x19\x0a\xeb\xda\x31\x8c\x20\x73\x2c\x4c\x02\xbc\x73\xff\x54\x4e\x12\x60\x26\xa8\x4b\x82\x16\x7e\xe3\x9b\xa4\xbb\x10\x92\x8d\x08\x9d\x0b\xc5\x27\xf9\xf6\x86\x91\x7f\x08\x5a\xd8\x3a\x23\xd4\x2c\x89\x6f\xfa\xf1\x6d\xf4\x03\xa3\xfd\x7d\x4f\xa6\xfd\xee\x42\x31\xc9\x07\x8c\x2b\x27\x5e\x05\x37\xc7\x60\x5d\xc3\x63\x49\xd3\x5c\xb2\x19\x93\x92\x5f\x34\xf0\x8f\x97\xd1\x7c\x51\x55\xda\x38\xce\xa6\x92\xb8\x57\x6d\x4a\x7b\x30\x22\xc6\x10\x7f\x38\x58\x8e\x08\x9d\xe4\x2f\x1f\x9d\xd0\xbb\x66\xeb\x99\x15\xa9\x2e\x2b\x21\x4f\x7f\x43\x75\xf9\xaf\xed\x5b\x85\x85\x52\x2e\x4b\x48\x25\x51\x33\x18\xff\x89\x8e\xeb\xcb\x8a\xf7\x82\xce\xf6\xf5\x2e\x8d\xa3\xe8\xfa\x32\xf4\x6b\x37\xb6\x63\xec\x69\x74\x8a\xe4\xd9\xcf\xf3\xa3\xbb\x4d\x6f\xbe\x9d\x95\x9f\x6b\x77\x49\xa8\xb6\xeb\x38\x82\x71\x7c\xca\xbc\x50\xcd\x4e\x88\xe8\xee\xfa\x92\xf4\x3f\xbe\x3c\xce\xf7\x13\xb4\x8f\x0b\xa7\x4b\xe2\x04\x7d\x32\xa4\x9a\x0b\x6a\xf3\x95\x70\x3e\x9b\xb3\x83\x93\x33\x0b\x8e\x92\xa0\x55\xd7\x86\xa8\x19\x07\x57\x6f\x7c\xf3\x15\x5c\x2d\x89\x04\xf7\x1d\x00\x7b\x6b\x67\x88\x6d\x1a\x3f\x72\x4f\xd4\xb5\x17\xf8\xec\xec\xf8\x0f\xd9\xf2\xcc\xa7\x50\xd5\x35\x57\xac\x69\x02\x8c\x76\x1b\x82\xd1\x76\x7f\x92\xe0\x6f\x00\x00\x00\xff\xff\xb2\xdf\x6d\x9f\xd6\x03\x00\x00")

func infoPlistTplBytes() ([]byte, error) {
	return bindataRead(
		_infoPlistTpl,
		"info.plist.tpl",
	)
}

func infoPlistTpl() (*asset, error) {
	bytes, err := infoPlistTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info.plist.tpl", size: 982, mode: os.FileMode(420), modTime: time.Unix(1479869272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"info.plist.tpl": infoPlistTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"info.plist.tpl": &bintree{infoPlistTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

